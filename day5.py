# -*- coding: utf-8 -*-
"""day5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fA5ur4UCGhRN_fZiK3SVbBqLWhfpcTI8
"""



"""DAY 6: FILE HANDLING AND ERROR HANDLING IN PYTHON

reading file
"""

file = open("/namratha hm.txt","r")
content = file.read()
print(content)
file.close()

"""2. writing file"""

file = open("/namratha hm.txt","w")
file.write("hello,world!\n")
file.close()

"""APPENDING TO A FILE"""

file = open("/namratha hm.txt","a")
file.write("this is an appended line.\n")
file.close()

"""USING 'WITH' STATEMENT"""

with open("/namratha hm.txt", "r")as file:
  content = file.read()
print(content)

"""6. file handling modes"""

with open("/WhatsApp Image 2024-12-13 at 21.01.22_ebe7efef.jpg","rb")as file:
  data = file.read()

"""ERROR HANDLING
TRY EXCEPT BLOCK
"""

try:
  num = int(input("enter a number: "))
  print(10 / num)
except ZeroDivisionError:
  print("you cannot divide by zero.")
except ValueError:
  print("invalid input! please enter a number")

"""FINALLY BLOCK"""

try:
  file = open("/namratha hm.txt","r")
except FileNotFoundError:
  print("file not found.")
finally:
  print("Execution complete")

"""RAISING EXCEPTIONS"""

def check_age(age):
  if age < 18:
    raise ValueError("age must be 18 or older.")
  return True

try:
  check_age(16)
except ValueError as e:
  print(e)

"""HANDS ON PRACTICE
1. READIND AND WRITING TO A FILE
"""

with open("/namratha hm.txt","w")as file:
  file.write("python is awesome!\n")

with open("/namratha hm.txt","r")as file:
  print(file.read())

"""2. APPENDING DATA A FILE"""

with open("/namratha hm.txt","a")as file:
  file.write("let's learn file handling.\n")

with open("/namratha hm.txt","r")as file:
  print(file.read())

"""3 HANDLING DIVISION BY ZERO"""

try:
  num1 = int(input("enter numerator: "))
  num2 = int(input("enter denominator: "))
  result = num1 / num2
  print("result:",result)
except ZeroDivisionError:
  print("cannot divide by zero.")
except ValueError:
  print("invalid input! enter numeric values")

"""4. CREATING A CUSTOM EXCEPTION"""

def check_positive(number):
  if number< 0:
    raise NegativeNumberserror("Negative number entered.")

try:
  num = int(input("enter a positive number:"))
  check_positive(num)
  print("you entered a positive number.")
except NegativeNumberError as e:
  print(e)

"""Count words in a file"""

def count_lines(file_path):
    try:
        with open(file_path, 'r') as file:
            return sum(1 for line in file)
    except FileNotFoundError:
        return "File not found!"
    except Exception as e:
        return f"An error occurred: {e}"

# Example usage
file_path = "example.txt"
line_count = count_lines(file_path)
print(f"The file has {line_count} lines.")

"""IMPORTANT
IMPORT RANDOM
"""

import random
random_number = random.randint(1,6)
print("the random number is :", random_number)

colors = ['red', 'blue', 'green']
print(random.choice(colors))  # Randomly selects one of the colors